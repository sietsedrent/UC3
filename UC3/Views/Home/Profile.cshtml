@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor HttpContextAccessor
@model UC3.Models.User
@{
    ViewData["Title"] = "Profile Page";

    // Check if the current user is viewing their own profile
    bool isOwnProfile = HttpContextAccessor.HttpContext.Session.GetInt32("UserId") == Model.userId;
}
<div class="text-center">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <div class="parent">
        <div class="div2">
            <br />
            <form method="post" action="/Home/Search">
                <input type="text" name="searchTerm" placeholder="Search Friends.." />
                <button type="submit" class="btn btn-primary">Search</button>
            </form>
        </div>
        <div class="div3">
            <div class="profile-header">
                <div class="profile-container">
                    @if (string.IsNullOrEmpty(Model.profilepicture))
                    {
                        <div class="profilepic-placeholder"></div>
                    }
                    else
                    {
                        <img src="@Model.profilepicture" alt="Profile Picture" class="profilepic" />
                    }
                    <h2 class="name-label">@Model.name</h2>
                </div>
            </div>
            <br />
            <div class="bio">
                <div class="bio-header">
                    <p>Bio</p>
                </div>
                <div class="bio-content">
                    <p>@Model.bio</p>
                </div>
            </div>
            <div id="weekCalendar" class="workout-week-view">
                <!-- Week calendar will be rendered here -->
            </div>
            <script>
                $(document).ready(function() {
                    // Haal de gebruikers-ID op voor wie we de kalender weergeven
                    const profileUserId = @Model.userId;

                    // Controleer of de huidige gebruiker dezelfde is als de profielgebruiker
                    const isOwnProfile = @(isOwnProfile ? "true" : "false");

                    renderSimpleWeekView(profileUserId, isOwnProfile);

                    // Lokale opslag sleutel maken die gebruikersspecifiek is
                    const workoutStorageKey = `workoutDays_user_${profileUserId}`;

                    // Initialiseer lokale opslag als deze nog niet bestaat voor deze gebruiker
                    if (!localStorage.getItem(workoutStorageKey)) {
                        localStorage.setItem(workoutStorageKey, JSON.stringify([]));
                    }

                    // Workout toevoegen functionaliteit - alleen beschikbaar als het je eigen profiel is
                    if (isOwnProfile) {
                        $(document).on('click', '.day-circle', function() {
                            const dayIndex = $(this).data('day-index');
                            $(this).toggleClass('has-workout');

                            // Update lokale opslag voor deze specifieke gebruiker
                            const workoutDays = JSON.parse(localStorage.getItem(workoutStorageKey));

                            if ($(this).hasClass('has-workout')) {
                                // Toevoegen als het nog niet bestaat
                                if (!workoutDays.includes(dayIndex)) {
                                    workoutDays.push(dayIndex);
                                }
                            } else {
                                // Verwijderen als het bestaat
                                const index = workoutDays.indexOf(dayIndex);
                                if (index > -1) {
                                    workoutDays.splice(index, 1);
                                }
                            }

                            localStorage.setItem(workoutStorageKey, JSON.stringify(workoutDays));
                        });
                    }
                });

                function renderSimpleWeekView(userId, isEditable) {
                    // Get current date info
                    const now = new Date();
                    const currentDay = now.getDay(); // 0 = Sunday, 1 = Monday, ...

                    // Calculate week number (ISO week)
                    const date = new Date(now.getTime());
                    date.setHours(0, 0, 0, 0);
                    date.setDate(date.getDate() + 3 - (date.getDay() + 6) % 7);
                    const week1 = new Date(date.getFullYear(), 0, 4);
                    const weekNumber = 1 + Math.round(((date.getTime() - week1.getTime()) / 86400000 - 3 + (week1.getDay() + 6) % 7) / 7);

                    // Gebruikersspecifieke key voor workout-dagen
                    const workoutStorageKey = `workoutDays_user_${userId}`;

                    // Workout dagen uit lokale opslag halen voor deze specifieke gebruiker
                    const workoutDays = JSON.parse(localStorage.getItem(workoutStorageKey) || '[]');

                    // Create week view HTML
                    let weekView = `
                        <div class="week-header">
                            <h3>Week: ${weekNumber}</h3>
                            <div class="week-navigation">
                                <button class="btn btn-sm btn-outline-primary prev-week">←</button>
                                <button class="btn btn-sm btn-outline-primary next-week">→</button>
                            </div>
                        </div>
                        <div class="weekdays-container">`;

                    // Create weekday circles
                    const dayNames = ['Maandag', 'Dinsdag', 'Woensdag', 'Donderdag', 'Vrijdag', 'Zaterdag', 'Zondag'];

                    for (let i = 0; i < 7; i++) {
                        const hasWorkout = workoutDays.includes(i);
                        const isToday = (i === (currentDay === 0 ? 6 : currentDay - 1)); // Adjust for Monday as first day

                        // Voeg cursor-pointer en data-attribuut alleen toe als het bewerkbaar is
                        const editableClass = isEditable ? 'cursor-pointer' : '';
                        const dataAttr = isEditable ? `data-day-index="${i}"` : '';

                        weekView += `
                            <div class="day-container ${isToday ? 'today' : ''}">
                                <div class="day-name">${dayNames[i]}</div>
                                <div class="day-circle ${hasWorkout ? 'has-workout' : ''} ${editableClass}" ${dataAttr}></div>
                            </div>`;
                    }

                    weekView += `
                        </div>`;

                    // Voeg alleen de footer met instructies toe als het bewerkbaar is
                    if (isEditable) {
                        weekView += `
                        <div class="week-footer">
                            <span class="workout-legend">
                                <span class="legend-item">
                                    <span class="day-circle has-workout"></span> Workout gepland
                                </span>
                                <span class="legend-item">
                                    <span class="day-circle"></span> Geen workout
                                </span>
                            </span>
                            <span class="workout-help">Klik op een cirkel om een workout toe te voegen of te verwijderen</span>
                        </div>`;
                    }

                    // Add to DOM
                    $('#weekCalendar').html(weekView);

                    // Add event listeners for navigation
                    $('.prev-week').click(function() {
                        // Navigate to previous week (example implementation)
                        alert('Naar vorige week');
                    });

                    $('.next-week').click(function() {
                        // Navigate to next week (example implementation)
                        alert('Naar volgende week');
                    });
                }
            </script>
        </div>
    </div>
</div>

<style>
    html {
        font-size: 14px;
    }

    .btn:focus, .btn:active:focus, .btn-link.nav-link:focus, .form-control:focus, .form-check-input:focus {
        box-shadow: 0 0 0 0.1rem white, 0 0 0 0.25rem #258cfb;
    }

    html {
        position: relative;
        min-height: 100%;
    }

    body {
        margin-bottom: 60px;
        background-color: #A7C4A0;
    }

    .parent {
        display: grid;
        grid-template-columns: repeat(5, 1fr);
        grid-template-rows: repeat(5, 1fr);
        gap: 0px;
    }

    .profile-header {
        background-color: #FFD8B1;
        padding: 20px;
        border-radius: 8px;
        margin-bottom: 20px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .profile-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 10px;
    }

    .name-label {
        font-size: 32px;
        font-weight: bold;
        color: #333;
        margin: 10px 0;
    }

    .profilepic {
        width: 120px;
        height: 120px;
        background-color: #e0e0e0;
        border-radius: 50%;
        object-fit: cover;
        border: 4px solid #fff;
        box-shadow: 0 2px 5px rgba(0,0,0,0.2);
    }

    .profilepic-placeholder {
        width: 120px;
        height: 120px;
        background-color: #e0e0e0;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        border: 4px solid #fff;
        box-shadow: 0 2px 5px rgba(0,0,0,0.2);
    }

    .div2 {
        grid-row: span 5 / span 5;
        background-color: #F8E1E7;
        padding: 15px;
        border-radius: 0 0 0 8px;
    }

    .div3 {
        grid-column: span 4 / span 4;
        grid-row: span 5 / span 5;
        background-color: #E3F2E1;
        padding: 20px;
        border-radius: 0 0 8px 0;
    }

    .bio {
        display: flex;
        flex-direction: column;
        gap: 10px;
        background-color: #f0f0f0;
        padding: 15px;
        border-radius: 8px;
        margin-bottom: 20px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .bio-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        border-bottom: 1px solid #ddd;
        padding-bottom: 8px;
    }

        .bio-header p {
            font-size: 18px;
            font-weight: bold;
            margin: 0;
        }

    .bio-content {
        background-color: white;
        padding: 15px;
        border-radius: 6px;
        min-height: 150px;
        display: flex;
        align-items: flex-start;
        text-align: left;
    }

        .bio-content p {
            margin: 0;
            line-height: 1.5;
        }

    input[type=text] {
        padding: 8px;
        border: 1px solid #ddd;
        border-radius: 4px;
        width: 70%;
        margin-right: 5px;
    }

    .btn-primary {
        background-color: #5D8C5D;
        border-color: #5D8C5D;
    }

        .btn-primary:hover {
            background-color: #4A704A;
            border-color: #4A704A;
        }

    /* Workout Week View Styles */
    .workout-week-view {
        margin-top: 20px;
        background-color: white;
        padding: 15px;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .week-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 15px;
        border-bottom: 1px solid #eee;
        padding-bottom: 10px;
    }

        .week-header h3 {
            margin: 0;
            font-size: 18px;
            color: #333;
        }

    .week-navigation {
        display: flex;
        gap: 8px;
    }

    .weekdays-container {
        display: flex;
        justify-content: space-between;
        flex-wrap: wrap;
        margin-bottom: 15px;
    }

    .day-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        width: 14%;
        padding: 8px 0;
        border-radius: 6px;
    }

        .day-container.today {
            background-color: #f0f8ff;
        }

    .day-name {
        margin-bottom: 8px;
        font-size: 14px;
        font-weight: 500;
    }

    .day-circle {
        width: 24px;
        height: 24px;
        border-radius: 50%;
        border: 2px solid #5D8C5D;
        background-color: white;
        transition: background-color 0.2s ease;
    }

        .day-circle.cursor-pointer {
            cursor: pointer;
        }

            .day-circle.cursor-pointer:hover {
                background-color: #E3F2E1;
            }

        .day-circle.has-workout {
            background-color: #5D8C5D;
        }

    .week-footer {
        display: flex;
        justify-content: space-between;
        align-items: center;
        border-top: 1px solid #eee;
        padding-top: 10px;
        font-size: 12px;
        color: #666;
    }

    .workout-legend {
        display: flex;
        gap: 15px;
    }

    .legend-item {
        display: flex;
        align-items: center;
        gap: 5px;
    }

        .legend-item .day-circle {
            width: 12px;
            height: 12px;
            cursor: default;
        }

    .workout-help {
        font-style: italic;
    }
</style>