@{
    ViewData["Title"] = "Nieuwe Workout Registreren";
}
<div class="text-center">
    <div class="div3">
        <h3>Nieuwe Workout Registreren</h3>
        <form id="workout-form">
            <div class="workout-header">
                <div>
                    <label for="typeWorkout">Type Workout:</label>
                    <input type="text" id="typeWorkout" name="typeWorkout" required>
                </div>
                <div>
                    <label for="workoutDate">Datum:</label>
                    <input type="date" id="workoutDate" name="workoutDate" required>
                </div>
            </div>

            <div id="exercises-container">
                <!-- Hier worden exercise containers toegevoegd -->
                <div class="exercise-container">
                    <h4>Oefening 1</h4>
                    <div class="exercise-fields">
                        <div>
                            <label for="exerciseName-0">Naam Oefening:</label>
                            <input type="text" id="exerciseName-0" name="exerciseName" required>
                        </div>
                        <div>
                            <label for="muscleGroup-0">Spiergroep:</label>
                            <select id="muscleGroup-0" name="muscleGroup" required>
                                <option value="">Selecteer spiergroep</option>
                                <option value="Borst">Borst</option>
                                <option value="Rug">Rug</option>
                                <option value="Schouders">Schouders</option>
                                <option value="Biceps">Biceps</option>
                                <option value="Triceps">Triceps</option>
                                <option value="Benen">Benen</option>
                                <option value="Buik">Buik</option>
                                <option value="Kuiten">Kuiten</option>
                                <option value="Hamstrings">Hamstrings</option>
                                <option value="Quadriceps">Quadriceps</option>
                                <option value="Glutes">Glutes</option>
                                <option value="Core">Core</option>
                                <option value="Cardio">Cardio</option>
                                <option value="Full Body">Full Body</option>
                            </select>
                        </div>
                        <div>
                            <label for="amountOfSets-0">Aantal Sets:</label>
                            <input type="number" id="amountOfSets-0" name="amountOfSets" min="1" required>
                        </div>
                        <div>
                            <label for="amountOfReps-0">Aantal Herhalingen:</label>
                            <input type="number" id="amountOfReps-0" name="amountOfReps" min="1" required>
                        </div>
                        <div>
                            <label for="liftedWeight-0">Gewicht (kg):</label>
                            <input type="number" id="liftedWeight-0" name="liftedWeight" step="0.5" min="0" required>
                        </div>
                    </div>
                    <button type="button" class="btn btn-danger remove-exercise" style="display: none;">Verwijder Oefening</button>
                </div>
            </div>

            <button type="button" id="add-exercise" class="btn btn-secondary">Oefening Toevoegen</button>

            <div class="comments-section">
                <label for="comments">Opmerkingen:</label>
                <textarea id="comments" name="comments"></textarea>
            </div>

            <button type="submit" class="btn btn-primary">Opslaan</button>
        </form>
    </div>
</div>

<!-- Confirmation Modal -->
<div id="confirmation-modal" class="modal" tabindex="-1" role="dialog" style="display: none;">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Workout Opslaan</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p>Wil je deze workout opslaan?</p>
                <div id="workout-summary"></div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Annuleren</button>
                <button type="button" class="btn btn-primary" id="confirm-save">Opslaan</button>
            </div>
        </div>
    </div>
</div>

<style>
    .div3 {
        max-width: 800px;
        margin: 0 auto;
        padding: 20px;
    }

    .workout-header {
        display: flex;
        justify-content: space-between;
        margin-bottom: 20px;
    }

    .exercise-container {
        border: 1px solid #ddd;
        border-radius: 5px;
        padding: 15px;
        margin-bottom: 20px;
        background-color: #f9f9f9;
    }

    .exercise-fields {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 10px;
    }

        .exercise-fields > div {
            margin-bottom: 10px;
        }

    .comments-section {
        margin: 20px 0;
    }

    #comments {
        width: 100%;
        height: 100px;
    }

    label {
        display: block;
        margin-bottom: 5px;
        font-weight: bold;
    }

    input, textarea, select {
        width: 100%;
        padding: 8px;
        border: 1px solid #ddd;
        border-radius: 4px;
    }

    #add-exercise {
        margin: 10px 0 20px;
    }

    .remove-exercise {
        margin-top: 10px;
    }

    /* Modal styles */
    .modal {
        position: fixed;
        top: 0;
        left: 0;
        z-index: 1050;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
    }

    .modal-dialog {
        position: relative;
        width: auto;
        margin: 10% auto;
        max-width: 500px;
    }

    .modal-content {
        position: relative;
        background-color: #fff;
        border-radius: 5px;
        padding: 20px;
    }

    .modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        border-bottom: 1px solid #ddd;
        padding-bottom: 10px;
    }

    .modal-footer {
        border-top: 1px solid #ddd;
        padding-top: 10px;
        display: flex;
        justify-content: flex-end;
    }

    .close {
        background: none;
        border: none;
        font-size: 1.5rem;
        cursor: pointer;
    }

    .summary-item {
        margin-bottom: 5px;
        padding: 5px;
        background-color: #f5f5f5;
        border-radius: 3px;
    }

    .is-invalid {
        border-color: #dc3545;
        background-color: #fff8f8;
    }
</style>

@section Scripts {
    <script>
        let exerciseCount = 1;

        // Functie voor form validatie
        function validateForm() {
            let isValid = true;
            const requiredFields = document.querySelectorAll('#workout-form [required]');

            // Reset alle validatie visuele feedback
            requiredFields.forEach(field => {
                field.classList.remove('is-invalid');
            });

            // Controleer elk verplicht veld
            requiredFields.forEach(field => {
                if (!field.value.trim()) {
                    field.classList.add('is-invalid');
                    isValid = false;
                }
            });

            // Controleer of gewichten geldig zijn (geen negatieve waarden)
            const weightFields = document.querySelectorAll('[id^="liftedWeight-"]');
            weightFields.forEach(field => {
                if (parseFloat(field.value) < 0) {
                    field.classList.add('is-invalid');
                    isValid = false;
                }
            });

            return isValid;
        }

        // Voegt een nieuwe oefening toe
        document.getElementById('add-exercise').addEventListener('click', function() {
            const exercisesContainer = document.getElementById('exercises-container');
            const newExerciseContainer = document.createElement('div');
            newExerciseContainer.className = 'exercise-container';

            // Update exercise count
            exerciseCount++;

            // Array van spiergroepen
            const muscleGroups = [
                "Borst", "Rug", "Schouders", "Biceps", "Triceps", "Benen", "Buik",
                "Kuiten", "Hamstrings", "Quadriceps", "Glutes", "Core", "Cardio", "Full Body"
            ];

            // Maak de opties voor de dropdown
            let muscleGroupOptions = '<option value="">Selecteer spiergroep</option>';
            muscleGroups.forEach(group => {
                muscleGroupOptions += `<option value="${group}">${group}</option>`;
            });

            newExerciseContainer.innerHTML = `
                <h4>Oefening ${exerciseCount}</h4>
                <div class="exercise-fields">
                    <div>
                        <label for="exerciseName-${exerciseCount-1}">Naam Oefening:</label>
                        <input type="text" id="exerciseName-${exerciseCount-1}" name="exerciseName" required>
                    </div>
                    <div>
                        <label for="muscleGroup-${exerciseCount-1}">Spiergroep:</label>
                        <select id="muscleGroup-${exerciseCount-1}" name="muscleGroup" required>
                            ${muscleGroupOptions}
                        </select>
                    </div>
                    <div>
                        <label for="amountOfSets-${exerciseCount-1}">Aantal Sets:</label>
                        <input type="number" id="amountOfSets-${exerciseCount-1}" name="amountOfSets" min="1" required>
                    </div>
                    <div>
                        <label for="amountOfReps-${exerciseCount-1}">Aantal Herhalingen:</label>
                        <input type="number" id="amountOfReps-${exerciseCount-1}" name="amountOfReps" min="1" required>
                    </div>
                    <div>
                        <label for="liftedWeight-${exerciseCount-1}">Gewicht (kg):</label>
                        <input type="number" id="liftedWeight-${exerciseCount-1}" name="liftedWeight" step="0.5" min="0" required>
                    </div>
                </div>
                <button type="button" class="btn btn-danger remove-exercise">Verwijder Oefening</button>
            `;

            exercisesContainer.appendChild(newExerciseContainer);

            // Toon de verwijderknop voor de eerste oefening als er meer dan één oefening is
            if (exerciseCount > 1) {
                document.querySelector('.exercise-container .remove-exercise').style.display = 'block';
            }

            // Voeg event listener toe aan de nieuwe verwijderknop
            newExerciseContainer.querySelector('.remove-exercise').addEventListener('click', function() {
                newExerciseContainer.remove();
                exerciseCount--;

                // Verberg de verwijderknop voor de eerste oefening als er maar één oefening over is
                if (exerciseCount === 1) {
                    document.querySelector('.exercise-container .remove-exercise').style.display = 'none';
                }

                // Hernummer de oefeningen
                const exerciseContainers = document.querySelectorAll('.exercise-container');
                exerciseContainers.forEach((container, index) => {
                    container.querySelector('h4').textContent = `Oefening ${index + 1}`;
                });
            });
        });

        // Referenties naar modal elementen
        const modal = document.getElementById('confirmation-modal');
        const closeButtons = document.querySelectorAll('[data-dismiss="modal"]');
        const confirmSaveButton = document.getElementById('confirm-save');
        const workoutSummary = document.getElementById('workout-summary');

        // Form submission
        document.getElementById('workout-form').addEventListener('submit', function(event) {
            event.preventDefault();

            if (!validateForm()) {
                alert('Vul alle verplichte velden correct in.');
                return;
            }

            // Voorbereiden van de workout data voor zowel de modal als de server
            const workoutData = {
                typeWorkout: document.getElementById('typeWorkout').value,
                workoutDate: document.getElementById('workoutDate').value,
                comments: document.getElementById('comments').value,
                exercises: []
            };

            // Verzamel data van alle oefeningen
            const exerciseContainers = document.querySelectorAll('.exercise-container');
            exerciseContainers.forEach((container, index) => {
                const exerciseData = {
                    exerciseName: document.getElementById(`exerciseName-${index}`).value,
                    muscleGroup: document.getElementById(`muscleGroup-${index}`).value,
                    trainingData: {
                        amountOfSets: parseInt(document.getElementById(`amountOfSets-${index}`).value),
                        amountOfReps: parseInt(document.getElementById(`amountOfReps-${index}`).value),
                        liftedWeight: parseFloat(document.getElementById(`liftedWeight-${index}`).value)
                    }
                };
                workoutData.exercises.push(exerciseData);
            });

            // Toon een samenvatting in de modal
            showWorkoutSummary(workoutData);

            // Toon de modal
            modal.style.display = 'block';

            // Sla de workout data op voor later gebruik
            modal.dataset.workoutData = JSON.stringify(workoutData);
        });

        // Functie om de workout samenvatting te tonen
        function showWorkoutSummary(workoutData) {
            // Formatteer de datum
            const date = new Date(workoutData.workoutDate);
            const formattedDate = date.toLocaleDateString('nl-NL');

            // Bouw de samenvatting op
            let summaryHTML = `
                <div class="summary-header">
                    <p><strong>
                    <p><strong>Datum:</strong> ${formattedDate}</p>
                    <p><strong>Type Workout:</strong> ${workoutData.typeWorkout}</p>
                </div>
                <h6>Oefeningen:</h6>
            `;

            workoutData.exercises.forEach((exercise, index) => {
                summaryHTML += `
                    <div class="summary-item">
                        <p><strong>${index + 1}. ${exercise.exerciseName}</strong> (${exercise.muscleGroup})</p>
                        <p>${exercise.trainingData.amountOfSets} sets × ${exercise.trainingData.amountOfReps} reps × ${exercise.trainingData.liftedWeight} kg</p>
                    </div>
                `;
            });

            // Voeg opmerkingen toe indien aanwezig
            if (workoutData.comments && workoutData.comments.trim() !== '') {
                summaryHTML += `
                    <div class="summary-footer">
                        <p><strong>Opmerkingen:</strong> ${workoutData.comments}</p>
                    </div>
                `;
            }

            workoutSummary.innerHTML = summaryHTML;
        }

        // Event listeners voor de modal
        closeButtons.forEach(button => {
            button.addEventListener('click', function() {
                modal.style.display = 'none';
            });
        });

        // Wanneer gebruiker buiten de modal klikt, sluit de modal
        window.addEventListener('click', function(event) {
            if (event.target === modal) {
                modal.style.display = 'none';
            }
        });

        // Bevestig opslaan handler
        confirmSaveButton.addEventListener('click', function() {
            // Haal de workout data op
            const workoutData = JSON.parse(modal.dataset.workoutData);

            // Stuur data naar de server
            fetch('@Url.Action("SaveWorkout", "Track")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(workoutData)
            }).then(response => {
                if (response.ok) {
                    window.location.href = '@Url.Action("Index", "Track")';
                } else {
                    modal.style.display = 'none';
                    alert('Er is een fout opgetreden bij het opslaan van de workout.');
                }
            }).catch(error => {
                console.error('Error:', error);
                modal.style.display = 'none';
                alert('Er is een fout opgetreden bij het opslaan van de workout.');
            });
        });



    </script>
}